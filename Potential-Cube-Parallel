program potential_parallel
    implicit none
    real*8 :: x, y, z
    real*8, parameter :: side = 1.0d0
    real*8, parameter :: radius = sqrt(3.0d0) / 2.0d0
    logical :: inf, inside_cube
    integer*8, parameter :: N = 10**5 
    integer*8, parameter :: num_wos = 10**6
    integer*8 :: particles_cube = 0
    integer*8 :: particles_inf = 0
    real*8 :: runtime
    integer*8 :: i, counti, countf, count_rate, count_max
    real*8 :: sigma, theta

    real*8, parameter :: lp_radius = 0.5d0
    real*8 :: x0, y0, z0

    integer*8 :: p, q 
    real*8, parameter :: a = -0.5d0, b = 0.5d0
    integer*8, parameter :: grid_divisions = CEILING(sqrt(REAL(N) / 6.0d0))
    real*8 :: spacing = (b - a) / grid_divisions

    !Arrays to store the charge density values from the 6 faces
    real*8, dimension(grid_divisions, grid_divisions) :: sigma_array 
    !TOP FACE

    real*8 :: x1, y1, z1
    real*8 :: V, d 

    !The point where we want to calculate the potential 
    real*8, parameter :: x1 = 0.300d0
    real*8, parameter :: y1 = 0.300d0
    real*8, parameter :: z1 = 0.5d0

    integer :: i
    integer :: ierr, rank, processN
    integer :: counti, countf, count_rate, count_max
    real(8) :: runtime

    include 'mpif.h'
    include "sprng_f.h"

    integer :: seed, gentype
    integer :: stream

    call MPI_INIT(ierr)
    call MPI_COMM_RANK(MPI_COMM_WORLD, rank, ierr)
    call MPI_COMM_SIZE(MPI_COMM_WORLD, processN, ierr)

    seed = 2131257613
    gentype = 5
    call init_sprng(seed, SPRNG_DEFAULT, gentype, stream)

    call system_clock(counti, count_rate, count_max)

    real*8, dimension(:,:), allocatable :: sigma_local
    allocate(sigma_local(grid_divisions, grid_divisions))

    do p = rank + 1, grid_divisions, processN
        do q = 1, grid_divisions
            x0 = a + spacing * p
            y0 = a + spacing * q
            z0 = 0.5d0

            sigma = 0.0d0
            do i = 1, num_wos
                inf = .false.
                inside_cube = .false.

                call center(x0, y0, z0, x, y, z, lp_radius)
                call unif_samp(x, y, z, lp_radius, theta)

                do while ((inside_cube .eqv. .false.) .and. (inf .eqv. .false.))
                    call wop(x, y, z)
                    call in_the_cube(inside_cube, x, y, z)
                    call infinity(inf, x, y, z)

                    if (inside_cube) then
                        particles_cube = particles_cube + 1
                        exit
                    else if (inf) then
                        particles_inf = particles_inf + 1
                        call summ(theta, sigma, inf)
                        exit
                    else
                        call center(x0, y0, z0, x, y, z, lp_radius)
                        call bts(inf, inside_cube, x, y, z)
                    end if
                end do     

                sigma = sigma / real(num_wos)
                sigma_local(p, q) = sigma
            end do
        end do
    end do

    call MPI_GATHER(sigma_local, grid_divisions * grid_divisions, MPI_DOUBLE_PRECISION, &
                    sigma_array, grid_divisions * grid_divisions, MPI_DOUBLE_PRECISION, 0, MPI_COMM_WORLD, ierr)

    !POTENTIAL CALCULATION
    V = 0.0d0

    do p = rank + 1, grid_divisions, processN
        do q = 1, grid_divisions
            x0 = a + spacing * p
            y0 = a + spacing * q
            z0 = 0.5d0

            call distance(x0, y0, z0, x1, y1, z1, d)
            V = V + sigma_array(p, q) / d
        end do
    end do

    call MPI_REDUCE(V, V, 1, MPI_DOUBLE_PRECISION, MPI_SUM, 0, MPI_COMM_WORLD, ierr)

    if (rank == 0) then
        print *, "Potential: ", V
    end if

    deallocate(sigma_local)

    call system_clock(countf, count_rate, count_max)

    write(*, "('Location: ', 3F10.3)") x1, y1, z1
    runtime = real(countf - counti) / real(count_rate)
    write(*, '(A, F6.3, A)') "Runtime: ", runtime, "s"

    call MPI_FINALIZE(ierr)

end program potential_parallel
 
subroutine center(x,y,z,x_center,y_center,z_center,lp_radius)
    implicit none 
    real*8, intent(in) :: x,y,z,lp_radius
    real*8, intent(inout) :: x_center, y_center, z_center
    real*8, parameter :: side = 0.5d0

    if (z >= side .and. abs(x) <= side .and. abs(y) <= side) then
        x_center = x
        y_center = y
        z_center = z+lp_radius
    else if (z <= -side .and. abs(x) <= side .and. abs(y) <= side) then
        x_center = x
        y_center = y
        z_center = z-lp_radius
    else if (y >= side .and. abs(x) <= side .and. abs(z) <= side) then
        x_center = x
        y_center = y+lp_radius
        z_center = z
    else if (y <= -side .and. abs(x) <= side .and. abs(z) <= side) then
        x_center = x
        y_center = y-lp_radius
        z_center = z
    else if (x >= side .and. abs(y) <= side .and. abs(z) <= side) then
        x_center = x+lp_radius
        y_center = y
        z_center = z
    else
        x_center = x-lp_radius
        y_center = y
        z_center = z
    end if

end subroutine center 

subroutine unif_samp(x, y, z, radius_inf,theta)
    implicit none
    real*8, intent(in):: radius_inf
    real*8, intent(inout):: x, y, z
    real*8:: urnd1, urnd2, phi, R
    real*8, parameter:: pi = dacos(-1.d0)
    real*8, intent(inout) :: theta

    call random_number(urnd1)
    call random_number(urnd2)
    R = radius_inf
    theta = dacos(1.d0-2.d0 * urnd1)
    phi = 2.d0 * pi * urnd2

    x = x + R * dsin(theta) * dcos(phi) 
    y = x + R * dsin(theta) * dsin(phi) 
    z = z + R * dcos(theta) 
end subroutine unif_samp

subroutine distance(x, y, z, x0, y0, z0, d)
    implicit none
    real*8, intent(in):: x, y, z, x0, y0, z0
    real*8, intent(out) :: d

    d = dsqrt((x - x0)**2 + (y - y0)**2 + (z - z0)**2)
end subroutine distance

subroutine wop(x,y,z)
    implicit none
    real*8, intent(inout) :: x,y,z
    real*8 :: x0, y0, z0
    real*8 :: urnd1, theta, d,r
    double precision, parameter :: pi = dacos(-1.d0)
    real*8, parameter :: a = sqrt(3.0d0)/2.0d0
    real*8, parameter :: rho = sqrt(2.0d0)/2.0d0 

    x0 = x
    y0 = y
    z0 = z
    call random_number(theta)
    call random_number(urnd1)
    theta = theta*2*pi
    if (z0 >= 0.5d0 .and. x0 <= abs(rho) .and. y0 <= abs(rho)) then
        d = z0-0.5d0
        r = d*sqrt(urnd1**2/(1-urnd1))
        x = x0 + r*dcos(theta)
        y = y0 + r*dsin(theta)
        z = 0.5d0
    else if (z0 <= -0.5d0 .and. x0 <= abs(rho) .and. y0 <= abs(rho)) then
        d = abs(z0+0.5d0)
        r = d*sqrt(urnd1**2/(1-urnd1))
        x = x0 + r*dcos(theta)
        y = y0 + r*dsin(theta)
        z = -0.5d0
    else if (y0 >= 0.5d0 .and. x0 <= abs(rho) .and. z0 <= abs(rho)) then
        d = y0-0.5d0
        r = d*sqrt(urnd1**2/(1-urnd1))
        x = x0 + r*dcos(theta)
        y = 0.5d0
        z = z0 + r*dsin(theta)
    else if (y0 <= -0.5d0 .and. x0 <= abs(rho) .and. z0 <= abs(rho)) then
        d = abs(y0+0.5d0)
        r = d*sqrt(urnd1**2/(1-urnd1))
        x = x0 + r*dcos(theta)
        y = -0.5d0
        z = z0 + r*dsin(theta)
    else if (x0 >= 0.5d0 .and. y0 <= abs(rho) .and. z0 <= abs(rho)) then
        d = x0-0.5d0
        r = d*sqrt(urnd1**2/(1-urnd1))
        x = 0.5d0
        y = y0 + r*dcos(theta)
        z = z0 + r*dsin(theta)
    else
        d = abs(x0+0.5d0)
        r = d*sqrt(urnd1**2/(1-urnd1))
        x = -0.5d0
        y = y0 + r*dcos(theta)
        z = z0 + r*dsin(theta)
    end if
end subroutine wop

!Back to sphere 
subroutine bts(inf,inside_cube,x,y,z)
    implicit none
    real*8, intent(inout) :: x,y,z
    logical, intent(in) :: inf, inside_cube
    real*8, parameter :: lp_radius = 0.5d0
    real*8 :: theta

    if ((inside_cube .eqv. .false.) .and. (inf .eqv. .false.)) then
        call unif_samp(x,y,z,lp_radius,theta)
    end if 
end subroutine bts 

subroutine infinity(inf, x, y, z)
    implicit none
    real*8, intent(in) :: x, y, z
    logical, intent(inout) :: inf
    real*8 :: r, ffr, j
    real*8 :: urnd1
    real*8, parameter :: a = sqrt(3.0d0)/2.0d0

    call distance(x, y, z, 0.d0, 0.d0, 0.d0, r)
    call random_number(urnd1)
    j = sqrt(urnd1**2/(1-urnd1**2))

    ffr = j * r

    if (ffr >= a) then
        inf = .true.
    else
        inf = .false.
    end if
end subroutine infinity

!Inside the cube 
subroutine in_the_cube(inside_cube, x, y, z) 
    implicit none
    logical, intent(inout) :: inside_cube
    real*8, intent(in) :: x, y, z

    if ((abs(x) <= 0.5d0) .and. (abs(y) <= 0.5d0) .and. (abs(z) <= 0.5d0)) then
        inside_cube = .true.
    else
        inside_cube = .false.
    end if
end subroutine in_the_cube

!Integration
subroutine summ(theta,sigma,inf)
    implicit none 
    real*8, intent(in) :: theta
    logical, intent(in) :: inf
    real*8, intent(inout) :: sigma
    real*8 :: const 

    const = 16.d0 * dsqrt(2.d0)

    if (inf .eqv. .true.) then 
      sigma = sigma + dsin(theta) / (const*(1.d0+dcos(theta))**1.5)
    end if 

end subroutine summ

